editor default

boolean [RIGHT | WRONG] // are the strings used to display a boolean value

Attribute {
    [ ${self.name} : ${self.declaredType} ]

}

Entity {
    [
        Entity ${name} [?base ${baseEntity}] {
            ${self.attributes }
            ${self.methods vertical }
        }
    ]
    trigger = "entity"
}

EntityModelUnit {
        [
        Unit ${name} {
            ${entities vertical }

        Unit level methods:
            ${methods vertical }
        }
        ]
}

Method {
    [
        method ${name} ( ${parameters separator[,] } ): ${declaredType} {
            ${body}
        }
    ]
}

Parameter {
    [ ${name} : ${declaredType} ]
}

MethodCallExpression {
    [
    CALL ${self.methodDefinition} ( ${self.args separator[,] } )
    ]
    referenceShortcut = ${methodDefinition}
    trigger = "method"
}

SumExpression {
    [
        sum from ${self.variable} = ${self.from} to ${self.to} of ${self.body}
    ]
    trigger = "sum"
}

LoopVariableRef {
    [ ${self.variable} ]
}

LoopVariable {
    [ ${self.name} ]
    trigger = "var"
}


NumberLiteralExpression {
        [${self.value}]
}

StringLiteralExpression {
        [
        '${self.value}'
        ]
    trigger = "'"
}

PlusExpression {
    symbol = "+"
}

MultiplyExpression {
    symbol = "*"
}

DivideExpression {
    symbol = "/"
}

LessThenExpression {
    symbol = "<"
}

OrExpression {
    symbol = "or"
}
AndExpression {
    symbol = "and"
}
GreaterThenExpression {
    symbol = ">"
}
EqualsExpression {
    symbol = "=="
}

BooleanLiteralExpression {
    [ ${self.value} ]
    trigger = "boolean"
}


AttributeRef {
    [ ${self.attribute} ]
    trigger = "attribute"
}

ParameterRef {
    [ ${self.parameter} [?. ${self.appliedfeature}] ]
}


IfExpression {
        [
        if (${self.condition}) then
            ${self.whenTrue}
        else
            ${self.whenFalse}
        endif
        ]
    trigger = "if"
}

AbsExpression {
    [ abs( ${self.expr} ) ]
    trigger = "abs"
}

//IfExpression {
//    @projection IfExpression
//        [
//        (${ self.condition } ? ${ self.whenTrue } : ${self.whenFalse} )
//        ]
//    @trigger "if"
//}
