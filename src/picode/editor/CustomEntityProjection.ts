// Generated by the ProjectIt Language Generator.
import {
    PiProjection,
    PiElement,
    Box,
    createDefaultExpressionBox,
    TextBox,
    KeyPressAction,
    styleToCSS,
    PiTableDefinition
} from "@projectit/core";
import { NumberLiteralExpression } from "../language/gen/NumberLiteralExpression";
import { numeric } from "./styles/styles";

/**
 * Class CustomEntityProjection provides an entry point for the language engineer to
 * define custom build additions to the editor.
 * These custom build additions are merged with the default and definition-based editor parts
 * in a three-way manner. For each modelelement,
 * (1) if a custom build creator/behavior is present, this is used,
 * (2) if a creator/behavior based on the editor definition is present, this is used,
 * (3) if neither (1) nor (2) yields a result, the default is used.
 */
export class CustomEntityProjection implements PiProjection {
    rootProjection: PiProjection;
    name: string = "manual";

    constructor(name?: string) {
        if (!!name) {
            this.name = name;
        }
    }

    getBox(element: PiElement): Box {
        // Add any handmade projections of your own before next statement
        // if(element instanceof NumberLiteralExpression) {
        //     return this.getDemoNumberLiteralExpressionBox(element)
        // }
        return null;
    }

    getTableDefinition(conceptName: string): PiTableDefinition {
        // Add any handmade table cells of your own before next statement
        return null;
    }

    // public getDemoNumberLiteralExpressionBox(exp: NumberLiteralExpression): Box {
    //     return createDefaultExpressionBox(exp, "number-literal", [
    //         new TextBox(exp, "NumberLiteralExpression-value", () => exp.value, (v: string) => (exp.value = v), {
    //             deleteWhenEmpty: true,
    //             style: styleToCSS(numeric),
    //             keyPressAction: (currentText: string, key: string, index: number) => {
    //                 return isNumber(currentText, key, index);
    //             }
    //         })
    //     ]);
    // }

}

// function isNumber(currentText: string, key: string, index: number): KeyPressAction {
//     if (isNaN(Number(key))) {
//         if (index === currentText.length) {
//             return KeyPressAction.GOTO_NEXT;
//         } else {
//             return KeyPressAction.NOT_OK;
//         }
//     } else {
//         return KeyPressAction.OK;
//     }
// }
